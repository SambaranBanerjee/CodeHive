
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Friendship {
  // The user who sent the request
  requesterId Int
  // The user who received the request
  receiverId  Int

  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester   User             @relation("sentFriendRequests", fields: [requesterId], references: [id])
  receiver    User             @relation("receivedFriendRequests", fields: [receiverId], references: [id])

  // Ensures a user can only send one request to another
  @@id([requesterId, receiverId])
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams                  TeamMember[]
  ownedProjects          Project[]    @relation("OwnedProjects")
  ownedTeams             Team[]       @relation("TeamOwners")
  messages               Message[]
  sentFriendRequests     Friendship[] @relation("sentFriendRequests")
  receivedFriendRequests Friendship[] @relation("receivedFriendRequests")

  createdBranches        Branch[] // Relation to branches created by the user
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String   // e.g., "main", "feature-ui"
  isMain    Boolean  @default(false)
  
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  authorId  Int      // User who created the branch
  author    User     @relation(fields: [authorId], references: [id])

  nodes     FileNode[] // The root nodes of the file tree for this branch

  createdAt DateTime @default(now())
  @@unique([projectId, name]) // A branch name must be unique within a project
}

enum NodeType {
  FILE
  FOLDER
}

model FileNode {
  id        Int       @id @default(autoincrement())
  name      String
  type      NodeType
  content   String?   // Content is for files; null for folders
  
  branchId  Int
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  
  // This creates the folder/file hierarchy
  parentId  Int?
  parent    FileNode? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  FileNode[] @relation("FolderChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User         @relation("TeamOwners", fields: [ownerId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  members   TeamMember[]
  projects  Project[]
  messages  Message[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  role      String   // "OWNER" | "ADMIN" | "MEMBER"
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPrivate   Boolean  @default(false)

  ownerId     Int
  teamId      Int?

  owner       User     @relation("OwnedProjects", fields: [ownerId], references: [id])
  team        Team?    @relation(fields: [teamId], references: [id])
  
  branches    Branch[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ❗️ REMOVE THIS LINE
  // ProjectFile ProjectFile[] 
}

model ProjectFile {
  id        Int       @id @default(autoincrement())
  projectId Int
  name      String
  content   String    @default("")
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  userId    Int
  teamId    Int?

  user      User      @relation(fields: [userId], references: [id])
  team      Team?     @relation(fields: [teamId], references: [id])
}